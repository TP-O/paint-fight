// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: player.sql

package pggenerated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
    user_id, username
) VALUES (
    $1, $2
)
RETURNING user_id, username, created_at
`

type CreatePlayerParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.UserID, arg.Username)
	var i Player
	err := row.Scan(&i.UserID, &i.Username, &i.CreatedAt)
	return i, err
}

const playerByID = `-- name: PlayerByID :one
SELECT user_id, username, created_at FROM players
WHERE user_id = $1
`

func (q *Queries) PlayerByID(ctx context.Context, userID pgtype.UUID) (Player, error) {
	row := q.db.QueryRow(ctx, playerByID, userID)
	var i Player
	err := row.Scan(&i.UserID, &i.Username, &i.CreatedAt)
	return i, err
}

const playersByUsername = `-- name: PlayersByUsername :many
SELECT user_id, username FROM players
WHERE username LIKE $1::varchar || '%'
`

type PlayersByUsernameRow struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
}

func (q *Queries) PlayersByUsername(ctx context.Context, username string) ([]PlayersByUsernameRow, error) {
	rows, err := q.db.Query(ctx, playersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlayersByUsernameRow{}
	for rows.Next() {
		var i PlayersByUsernameRow
		if err := rows.Scan(&i.UserID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
