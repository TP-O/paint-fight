// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: player.sql

package pggenerated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
    username, email, password
) VALUES (
    $1, $2, $3
)
RETURNING id, username, email, password, active, email_verified_at, created_at, password_updated_at
`

type CreatePlayerParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.Username, arg.Email, arg.Password)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const playerByEmailOrUsername = `-- name: PlayerByEmailOrUsername :one
SELECT id, username, email, password, active, email_verified_at, created_at, password_updated_at FROM players
WHERE email = $1 OR
    username = $1 LIMIT 1
`

func (q *Queries) PlayerByEmailOrUsername(ctx context.Context, emailOrUsername string) (Player, error) {
	row := q.db.QueryRow(ctx, playerByEmailOrUsername, emailOrUsername)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const playerByID = `-- name: PlayerByID :one
SELECT id, username, email, password, active, email_verified_at, created_at, password_updated_at FROM players
WHERE id = $1 LIMIT 1
`

func (q *Queries) PlayerByID(ctx context.Context, id pgtype.UUID) (Player, error) {
	row := q.db.QueryRow(ctx, playerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE players SET password = $1, password_updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string      `json:"password"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE players SET email_verified_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, verifyEmail, id)
	return err
}
